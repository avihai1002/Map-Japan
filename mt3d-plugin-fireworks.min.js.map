{"version":3,"file":"mt3d-plugin-fireworks.min.js","sources":["../src/index.js"],"sourcesContent":["import {THREE} from 'mini-tokyo-3d';\nimport vertexShader from './vertex-shader.glsl';\nimport fragmentShader from './fragment-shader.glsl';\nimport fireworksSVG from './fireworks.svg';\n\nconst {\n    AdditiveBlending,\n    BufferGeometry,\n    DynamicDrawUsage,\n    Float32BufferAttribute,\n    FloatType,\n    Group,\n    MathUtils,\n    Points,\n    RawShaderMaterial,\n    Texture,\n    Vector3\n} = THREE;\n\nfunction clamp(value, lower, upper) {\n    return Math.min(Math.max(value, lower), upper);\n}\n\nconst friction = 0.998;\nconst textureSize = 128.0;\nconst particleSize = 300;\n\nconst getOffsetXYZ = i => {\n    const offset = 3;\n    const index = i * offset;\n    const x = index;\n    const y = index + 1;\n    const z = index + 2;\n\n    return {x, y, z};\n};\n\nconst getOffsetRGBA = i => {\n    const offset = 4;\n    const index = i * offset;\n    const r = index;\n    const g = index + 1;\n    const b = index + 2;\n    const a = index + 3;\n\n    return {r, g, b, a};\n};\n\nconst getRandomNum = (max = 0, min = 0) => Math.floor(Math.random() * (max + 1 - min)) + min;\n\nconst drawRadialGradation = (ctx, canvasRadius, canvasW, canvasH) => {\n    ctx.save();\n    const gradient = ctx.createRadialGradient(canvasRadius, canvasRadius, 0, canvasRadius, canvasRadius, canvasRadius);\n    gradient.addColorStop(0.0, 'rgba(255,255,255,1.0)');\n    gradient.addColorStop(0.5, 'rgba(255,255,255,0.5)');\n    gradient.addColorStop(1.0, 'rgba(255,255,255,0)');\n    ctx.fillStyle = gradient;\n    ctx.fillRect(0, 0, canvasW, canvasH);\n    ctx.restore();\n};\n\nconst getTexture = () => {\n    const canvas = document.createElement('canvas');\n    const ctx = canvas.getContext('2d');\n\n    const diameter = textureSize;\n    canvas.width = diameter;\n    canvas.height = diameter;\n    const canvasRadius = diameter / 2;\n\n    /* gradation circle\n    ------------------------ */\n    drawRadialGradation(ctx, canvasRadius, canvas.width, canvas.height);\n    const texture = new Texture(canvas);\n    texture.type = FloatType;\n    texture.needsUpdate = true;\n    return texture;\n};\n\nconst canvasTexture = getTexture();\n\nconst getPointMesh = (num, vels, type) => {\n    // geometry\n    const bufferGeometry = new BufferGeometry();\n    const vertices = [];\n    const velocities = [];\n    const colors = [];\n    const adjustSizes = [];\n    const masses = [];\n    const colorType = Math.random() > 0.3 ? 'single' : 'multiple';\n    const singleColor = getRandomNum(100, 20) * 0.01;\n    const multipleColor = () => getRandomNum(100, 1) * 0.01;\n    let rgbType;\n    const rgbTypeDice = Math.random();\n\n    if (rgbTypeDice > 0.66) {\n        rgbType = 'red';\n    } else if (rgbTypeDice > 0.33) {\n        rgbType = 'green';\n    } else {\n        rgbType = 'blue';\n    }\n    for (let i = 0; i < num; i++) {\n        const pos = new Vector3(0, 0, 0);\n\n        vertices.push(pos.x, pos.y, pos.z);\n        velocities.push(vels[i].x, vels[i].y, vels[i].z);\n        if (type === 'seed') {\n            let size;\n\n            if (type === 'trail') {\n                size = Math.random() * 0.1 + 0.1;\n            } else {\n                // size = Math.pow(vels[i].z, 2) * 0.04;\n                size = Math.random() * 0.1 + 0.1;\n            }\n            if (i === 0) {\n                size *= 1.1;\n            }\n            adjustSizes.push(size * 5);\n            masses.push(size * 0.017);\n            colors.push(1.0, 1.0, 1.0, 1.0);\n        } else {\n            const size = getRandomNum(particleSize, 10) * 0.001;\n\n            adjustSizes.push(size * 5);\n            masses.push(size * 0.017);\n            if (colorType === 'multiple') {\n                colors.push(multipleColor(), multipleColor(), multipleColor(), 1.0);\n            } else {\n                switch (rgbType) {\n                case 'red':\n                    colors.push(singleColor, 0.1, 0.1, 1.0);\n                    break;\n                case 'green':\n                    colors.push(0.1, singleColor, 0.1, 1.0);\n                    break;\n                case 'blue':\n                    colors.push(0.1, 0.1, singleColor, 1.0);\n                    break;\n                default:\n                    colors.push(singleColor, 0.1, 0.1, 1.0);\n                }\n            }\n        }\n    }\n    bufferGeometry.setAttribute('position', new Float32BufferAttribute(vertices, 3).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('velocity', new Float32BufferAttribute(velocities, 3).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('color', new Float32BufferAttribute(colors, 4).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('adjustSize', new Float32BufferAttribute(adjustSizes, 1).setUsage(DynamicDrawUsage));\n    bufferGeometry.setAttribute('mass', new Float32BufferAttribute(masses, 1).setUsage(DynamicDrawUsage));\n\n    // material\n    const shaderMaterial = new RawShaderMaterial({\n        uniforms: {\n            size: {\n                type: 'f',\n                value: textureSize\n            },\n            texture: {\n                type: 't',\n                value: canvasTexture\n            }\n        },\n        transparent: true,\n        // Display of \"blending: THREE.AdditiveBlending\" does not work properly if \"depthWrite\" property is set to true.\n        // Therefore, it is necessary to make it false in the case of making the image transparent by blending.\n        depthWrite: false,\n        blending: AdditiveBlending,\n        vertexShader,\n        fragmentShader\n    });\n\n    return new Points(bufferGeometry, shaderMaterial);\n};\n\nclass ParticleMesh {\n\n    constructor(scale, num, vels, type) {\n        this.scale = scale;\n        this.particleNum = num;\n        this.timerStartFading = 10;\n        this.mesh = getPointMesh(num, vels, type);\n    }\n\n    update(gravity, frameRateFactor) {\n        if (this.timerStartFading > 0) {\n            this.timerStartFading -= 0.3;\n        }\n\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.5 ? 0.98 : 0.96);\n        const decrementByVel = v => (Math.random() > 0.5 ? 0 : (1 - v) * 0.1);\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale * frameRateFactor;\n            velocity.array[x] *= 1 - ((1 - friction) * frameRateFactor);\n            velocity.array[y] *= 1 - ((1 - friction) * frameRateFactor);\n            velocity.array[z] *= 1 - ((1 - friction) * frameRateFactor);\n            position.array[x] += velocity.array[x] * frameRateFactor;\n            position.array[y] += velocity.array[y] * frameRateFactor;\n            position.array[z] += velocity.array[z] * frameRateFactor;\n\n            const {a} = getOffsetRGBA(i);\n\n            if (this.timerStartFading <= 0) {\n                color.array[a] *= 1 - ((1 - (decrementRandom() - decrementByVel(color.array[a]))) * frameRateFactor);\n                if (color.array[a] < 0.001) {\n                    color.array[a] = 0;\n                }\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n    disposeAll() {\n        this.mesh.geometry.dispose();\n        this.mesh.material.dispose();\n    }\n\n}\n\nclass ParticleSeedMesh extends ParticleMesh {\n\n    constructor(scale, num, vels) {\n        super(scale, num, vels, 'seed');\n    }\n\n    update(gravity, frameRateFactor) {\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.3 ? 0.99 : 0.96);\n        const decrementByVel = v => (Math.random() > 0.3 ? 0 : (1 - v) * 0.1);\n        const shake = () => (Math.random() > 0.5 ? 0.05 : -0.05) * this.scale * frameRateFactor;\n        const dice = () => Math.random() > 0.1;\n        const _f = friction * 0.98;\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale * frameRateFactor;\n            velocity.array[x] *= 1 - ((1 - _f) * frameRateFactor);\n            velocity.array[y] *= 1 - ((1 - _f) * frameRateFactor);\n            velocity.array[z] *= 1 - ((1 - _f) * frameRateFactor);\n            position.array[x] += velocity.array[x] * frameRateFactor;\n            position.array[y] += velocity.array[y] * frameRateFactor;\n            position.array[z] += velocity.array[z] * frameRateFactor;\n            if (dice()) {\n                position.array[x] += shake();\n            }\n            if (dice()) {\n                position.array[y] += shake();\n            }\n\n            const {a} = getOffsetRGBA(i);\n\n            color.array[a] *= 1 - ((1 - (decrementRandom() - decrementByVel(color.array[a]))) * frameRateFactor);\n            if (color.array[a] < 0.001) {\n                color.array[a] = 0;\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n}\n\nclass ParticleTailMesh extends ParticleMesh {\n\n    constructor(scale, num, vels) {\n        super(scale, num, vels, 'trail');\n    }\n\n    update(gravity, frameRateFactor) {\n        const {position, velocity, color, mass} = this.mesh.geometry.attributes;\n        const decrementRandom = () => (Math.random() > 0.3 ? 0.98 : 0.95);\n        const shake = () => (Math.random() > 0.5 ? 0.05 : -0.05) * this.scale * frameRateFactor;\n        const dice = () => Math.random() > 0.2;\n\n        for (let i = 0; i < this.particleNum; i++) {\n            const {x, y, z} = getOffsetXYZ(i);\n\n            velocity.array[z] += gravity.z - mass.array[i] * this.scale * frameRateFactor;\n            velocity.array[x] *= 1 - ((1 - friction) * frameRateFactor);\n            velocity.array[y] *= 1 - ((1 - friction) * frameRateFactor);\n            velocity.array[z] *= 1 - ((1 - friction) * frameRateFactor);\n            position.array[x] += velocity.array[x] * frameRateFactor;\n            position.array[y] += velocity.array[y] * frameRateFactor;\n            position.array[z] += velocity.array[z] * frameRateFactor;\n            if (dice()) {\n                position.array[x] += shake();\n            }\n            if (dice()) {\n                position.array[y] += shake();\n            }\n\n            const {a} = getOffsetRGBA(i);\n\n            color.array[a] *= 1 - ((1 - decrementRandom()) * frameRateFactor);\n            if (color.array[a] < 0.001) {\n                color.array[a] = 0;\n            }\n        }\n        position.needsUpdate = true;\n        velocity.needsUpdate = true;\n        color.needsUpdate = true;\n    }\n\n}\n\nclass BasicFireWorks {\n\n    constructor(scale, position) {\n        this.scale = scale;\n        this.position = position;\n        this.gravity = new Vector3(0, 0, -0.005 * scale);\n        this.meshGroup = new Group();\n        this.isExplode = false;\n        const max = 400;\n        const min = 150;\n        this.petalsNum = getRandomNum(max, min);\n        this.life = 150;\n        this.seed = this.getSeed();\n        this.meshGroup.add(this.seed.mesh);\n        this.flowerSizeRate = MathUtils.mapLinear(this.petalsNum, min, max, 0.4, 0.7);\n    }\n\n    getSeed() {\n        const num = 40;\n        const vels = [];\n\n        for (let i = 0; i < num; i++) {\n            const vx = 0;\n            const vy = 0;\n            const vz = (i === 0 ? Math.random() * 2.5 + 0.9 : Math.random() * 2.0 + 0.4) * this.scale;\n\n            vels.push(new Vector3(vx, vy, vz));\n        }\n\n        const pm = new ParticleSeedMesh(this.scale, num, vels);\n        const x = this.position.x;\n        const y = this.position.y;\n        const z = 0;\n\n        pm.mesh.position.set(x, y, z);\n        return pm;\n    }\n\n    explode(pos) {\n        this.isExplode = true;\n        this.flower = this.getFlower(pos);\n        this.meshGroup.add(this.flower.mesh);\n        this.meshGroup.remove(this.seed.mesh);\n        this.seed.disposeAll();\n    }\n\n    getFlower(pos) {\n        const num = this.petalsNum;\n        const vels = [];\n        let radius;\n        const dice = Math.random();\n\n        if (dice > 0.5) {\n            for (let i = 0; i < num; i++) {\n                radius = getRandomNum(120, 60) * 0.01 * this.scale;\n\n                const theta = MathUtils.degToRad(Math.random() * 180);\n                const phi = MathUtils.degToRad(Math.random() * 360);\n                const vx = Math.sin(theta) * Math.cos(phi) * radius;\n                const vy = Math.sin(theta) * Math.sin(phi) * radius;\n                const vz = Math.cos(theta) * radius;\n                const vel = new Vector3(vx, vy, vz);\n\n                vel.multiplyScalar(this.flowerSizeRate);\n                vels.push(vel);\n            }\n        } else {\n            const zStep = 180 / num;\n            const trad = (360 * (Math.random() * 20 + 1)) / num;\n            const xStep = trad;\n            const yStep = trad;\n\n            radius = getRandomNum(120, 60) * 0.01 * this.scale;\n            for (let i = 0; i < num; i++) {\n                const sphereRate = Math.sin(MathUtils.degToRad(zStep * i));\n                const vz = Math.cos(MathUtils.degToRad(zStep * i)) * radius;\n                const vx = Math.cos(MathUtils.degToRad(xStep * i)) * sphereRate * radius;\n                const vy = Math.sin(MathUtils.degToRad(yStep * i)) * sphereRate * radius;\n                const vel = new Vector3(vx, vy, vz);\n                vel.multiplyScalar(this.flowerSizeRate);\n                vels.push(vel);\n            }\n        }\n\n        const particleMesh = new ParticleMesh(this.scale, num, vels);\n\n        particleMesh.mesh.position.set(pos.x, pos.y, pos.z);\n        return particleMesh;\n    }\n\n    update(frameRateFactor) {\n        if (!this.isExplode) {\n            this.drawTail(frameRateFactor);\n        } else {\n            this.flower.update(this.gravity, frameRateFactor);\n            if (this.life > 0) {\n                this.life -= 1 * frameRateFactor;\n            }\n        }\n    }\n\n    drawTail(frameRateFactor) {\n        this.seed.update(this.gravity, frameRateFactor);\n        const {position, velocity} = this.seed.mesh.geometry.attributes;\n        let count = 0;\n        let isComplete = true;\n\n        // Check if the y-axis speed is down for all particles\n        for (let i = 0, l = velocity.array.length; i < l; i++) {\n            const v = velocity.array[i];\n            const index = i % 3;\n\n            if (index === 2 && v > 0) {\n                count++;\n            }\n        }\n\n        isComplete = count === 0;\n        if (!isComplete) {\n            return;\n        }\n\n        const {x, y, z} = this.seed.mesh.position;\n        const flowerPos = new Vector3(x, y, z);\n        let highestPos = 0;\n        let offsetPos;\n\n        for (let i = 0, l = position.array.length; i < l; i++) {\n            const p = position.array[i];\n            const index = i % 3;\n\n            if (index === 2 && p > highestPos) {\n                highestPos = p;\n                offsetPos = new Vector3(position.array[i - 2], position.array[i - 1], p);\n            }\n        }\n        flowerPos.add(offsetPos);\n        this.explode(flowerPos);\n    }\n\n}\n\nclass RichFireWorks extends BasicFireWorks {\n\n    constructor(scale, position) {\n        super(scale, position);\n\n        const max = 150;\n        const min = 100;\n\n        this.petalsNum = getRandomNum(max, min);\n        this.flowerSizeRate = MathUtils.mapLinear(this.petalsNum, min, max, 0.4, 0.7);\n        this.tailMeshGroup = new Group();\n        this.tails = [];\n    }\n\n    explode(pos) {\n        this.isExplode = true;\n        this.flower = this.getFlower(pos);\n        this.tails = this.getTail();\n        this.meshGroup.add(this.flower.mesh);\n        this.meshGroup.add(this.tailMeshGroup);\n    }\n\n    getTail() {\n        const tails = [];\n        const num = 20;\n        const {color: petalColor} = this.flower.mesh.geometry.attributes;\n\n        for (let i = 0; i < this.petalsNum; i++) {\n            const vels = [];\n\n            for (let j = 0; j < num; j++) {\n                const vx = 0;\n                const vy = 0;\n                const vz = 0;\n\n                vels.push(new Vector3(vx, vy, vz));\n            }\n\n            const tail = new ParticleTailMesh(this.scale, num, vels);\n\n            const {r, g, b, a} = getOffsetRGBA(i);\n\n            const petalR = petalColor.array[r];\n            const petalG = petalColor.array[g];\n            const petalB = petalColor.array[b];\n            const petalA = petalColor.array[a];\n\n            const {position, color} = tail.mesh.geometry.attributes;\n\n            for (let k = 0; k < position.count; k++) {\n                const {r, g, b, a} = getOffsetRGBA(k);\n\n                color.array[r] = petalR;\n                color.array[g] = petalG;\n                color.array[b] = petalB;\n                color.array[a] = petalA;\n            }\n\n            const {x, y, z} = this.flower.mesh.position;\n\n            tail.mesh.position.set(x, y, z);\n            tails.push(tail);\n            this.tailMeshGroup.add(tail.mesh);\n        }\n        return tails;\n    }\n\n    update(frameRateFactor) {\n        if (!this.isExplode) {\n            this.drawTail(frameRateFactor);\n        } else {\n            this.flower.update(this.gravity, frameRateFactor);\n\n            const {position: flowerGeometory} = this.flower.mesh.geometry.attributes;\n\n            for (let i = 0, l = this.tails.length; i < l; i++) {\n                const tail = this.tails[i];\n                tail.update(this.gravity, frameRateFactor);\n                const {x, y, z} = getOffsetXYZ(i);\n                const flowerPos = new Vector3(\n                    flowerGeometory.array[x],\n                    flowerGeometory.array[y],\n                    flowerGeometory.array[z]\n                );\n                const {position, velocity} = tail.mesh.geometry.attributes;\n\n                for (let k = 0; k < position.count; k++) {\n                    const {x, y, z} = getOffsetXYZ(k);\n                    const desiredVelocity = new Vector3();\n                    const tailPos = new Vector3(position.array[x], position.array[y], position.array[z]);\n                    const tailVel = new Vector3(velocity.array[x], velocity.array[y], velocity.array[z]);\n\n                    desiredVelocity.subVectors(flowerPos, tailPos);\n\n                    const steer = desiredVelocity.sub(tailVel);\n\n                    steer.normalize();\n                    steer.multiplyScalar(Math.random() * 0.0003 * this.life * this.scale * frameRateFactor);\n                    velocity.array[x] += steer.x;\n                    velocity.array[y] += steer.y;\n                    velocity.array[z] += steer.z;\n                }\n                velocity.needsUpdate = true;\n            }\n\n            if (this.life > 0) {\n                this.life -= 1.2 * frameRateFactor;\n            }\n        }\n    }\n\n}\n\nclass FireworksLayer {\n\n    constructor(options) {\n        const me = this;\n        let lastTick = performance.now();\n\n        me.id = options.id;\n        me.type = 'three';\n        me.lightColor = 'white';\n        me.fireworksInstances = {};\n\n        const repeat = () => {\n            const now = performance.now();\n\n            me.tick((now - lastTick) / (1000 / 60));\n            lastTick = now;\n            requestAnimationFrame(repeat);\n        };\n\n        repeat();\n    }\n\n    onAdd(map, context) {\n        const me = this;\n\n        me.map = map;\n        me.scene = context.scene;\n    }\n\n    tick(frameRateFactor) {\n        const {fireworksInstances, scene} = this;\n\n        for (const key of Object.keys(fireworksInstances)) {\n            const instances = fireworksInstances[key];\n            const exploadedIndexList = [];\n\n            for (let i = instances.length - 1; i >= 0; i--) {\n                const instance = instances[i];\n\n                instance.update(frameRateFactor);\n                if (instance.isExplode) {\n                    exploadedIndexList.push(i);\n                }\n            }\n\n            for (let i = 0, l = exploadedIndexList.length; i < l; i++) {\n                const index = exploadedIndexList[i];\n                const instance = instances[index];\n\n                if (!instance) {\n                    return;\n                }\n\n                /*\n                    Be careful because js heap size will continue to increase unless you do the following:\n                    - Remove unuse mesh from scene\n                    - Execute dispose method of Geometres and Materials in the Mesh\n                */\n                instance.meshGroup.remove(instance.seed.mesh);\n                instance.seed.disposeAll();\n                if (instance.life <= 0) {\n                    scene.remove(instance.meshGroup);\n                    if (instance.tailMeshGroup) {\n                        instance.tails.forEach(v => {\n                            v.disposeAll();\n                        });\n                    }\n                    instance.flower.disposeAll();\n                    instances.splice(index, 1);\n                }\n            }\n        }\n    }\n\n    launchFireWorks(key, lngLat) {\n        const me = this;\n        const {map, scene, fireworksInstances} = me;\n        let instances = fireworksInstances[key];\n\n        if (!instances) {\n            instances = me.fireworksInstances[key] = [];\n        }\n\n        if (instances.length > 5) {\n            return;\n        }\n\n        const modelPosition = map.getModelPosition(lngLat);\n        const modelScale = map.getModelScale();\n        const scale = Math.pow(2, 17 - clamp(map.getZoom(), 14, 16)) * modelScale;\n        const position = {\n            x: modelPosition.x + (Math.random() * 400 - 200) * modelScale,\n            y: modelPosition.y + (Math.random() * 400 - 200) * modelScale\n        };\n        const fw = Math.random() > 0.5 ? new BasicFireWorks(scale, position) : new RichFireWorks(scale, position);\n\n        instances.push(fw);\n        scene.add(fw.meshGroup);\n    }\n\n}\n\nclass FireworksPlugin {\n\n    constructor() {\n        const me = this;\n\n        me.id = 'fireworks';\n        me.name = {\n            en: 'Fireworks',\n            fr: 'Feux d\\'artifice',\n            ja: '花火',\n            ko: '불꽃놀이',\n            ne: 'आतिशबाजी',\n            pt: 'Fogos de artifício',\n            th: 'ดอกไม้ไฟ',\n            'zh-Hans': '烟花',\n            'zh-Hant': '煙花'\n        };\n        me.iconStyle = {\n            backgroundSize: '32px',\n            backgroundImage: `url(\"${fireworksSVG}\")`\n        };\n        me.viewModes = ['ground'];\n        me.layer = new FireworksLayer({id: me.id});\n        me.plans = [{\n            // Sumidagawa 1 (2020-07-23 19:00 to 20:30)\n            coord: [139.8061467, 35.7168468],\n            start: 1595498400000,\n            end: 1595503800000\n        }, {\n            // Sumidagawa 2 (2020-07-23 19:30 to 20:30)\n            coord: [139.7957901, 35.7053016],\n            start: 1595500200000,\n            end: 1595503800000\n        }, {\n            // Adachi (2020-07-24 19:30 to 20:30)\n            coord: [139.7960082, 35.7596802],\n            start: 1595586600000,\n            end: 1595590200000\n        }, {\n            // Makuhari (2020-07-25 19:10 to 20:20)\n            coord: [140.0265839, 35.6429351],\n            start: 1595671800000,\n            end: 1595676000000\n        }, {\n            // Minatomirai (2020-07-26 19:30 to 19:55)\n            coord: [139.6411158, 35.4606603],\n            start: 1595759400000,\n            end: 1595760900000\n        }, {\n            // Jingu (2020-08-08 19:30 to 20:30)\n            coord: [139.7186873, 35.6765851],\n            start: 1596882600000,\n            end: 1596886200000\n        }, {\n            // Edogawa (2020-08-09 19:15 to 20:30)\n            coord: [139.9028813, 35.7187124],\n            start: 1596968100000,\n            end: 1596972600000\n        }, {\n            // Itabashi (2020-08-10 19:00 to 20:30)\n            coord: [139.6759402, 35.7988664],\n            start: 1597053600000,\n            end: 1597059000000\n        }, {\n            // Olympic Opening (2021-07-23 20:00 to 23:00)\n            coord: [139.7161639, 35.6759322],\n            start: 1627038000000,\n            end: 1627048800000\n        }, {\n            // Olympic Closing (2021-08-08 20:00 to 23:00)\n            coord: [139.7161639, 35.6759322],\n            start: 1628420400000,\n            end: 1628431200000\n        }, {\n            // Disney Light the Night (Everyday 20:00 to 20:05)\n            coord: [139.8848537, 35.6307327],\n            start: 39600000,\n            end: 39900000,\n            daily: true\n        }];\n    }\n\n    onAdd(map) {\n        const me = this;\n\n        me.map = map;\n        map.addLayer(me.layer);\n    }\n\n    onRemove(map) {\n        map.removeLayer(this.id);\n    }\n\n    onEnabled() {\n        const me = this;\n\n        me.interval = setInterval(() => {\n            const now = me.map.clock.getTime();\n\n            me.plans.forEach((plan, index) => {\n                if ((plan.daily && now % 86400000 >= plan.start && now % 86400000 < plan.end ||\n                    !plan.daily && now >= plan.start && now < plan.end) && Math.random() > 0.7) {\n                    me.layer.launchFireWorks(index, plan.coord);\n                }\n            });\n        }, 100);\n    }\n\n    onDisabled() {\n        clearInterval(this.interval);\n    }\n\n    onVisibilityChanged(visible) {\n        const me = this;\n\n        me.map.setLayerVisibility(me.id, visible ? 'visible' : 'none');\n    }\n\n}\n\nexport default function() {\n    return new FireworksPlugin();\n}\n"],"names":["AdditiveBlending","BufferGeometry","DynamicDrawUsage","Float32BufferAttribute","FloatType","Group","MathUtils","Points","RawShaderMaterial","Texture","Vector3","THREE","friction","getOffsetXYZ","i","index","x","y","z","getOffsetRGBA","r","g","b","a","getRandomNum","max","min","Math","floor","random","canvasTexture","canvas","document","createElement","ctx","getContext","width","height","canvasRadius","canvasW","canvasH","save","gradient","createRadialGradient","addColorStop","fillStyle","fillRect","restore","drawRadialGradation","diameter","texture","type","needsUpdate","getTexture","ParticleMesh","constructor","scale","num","vels","this","particleNum","timerStartFading","mesh","bufferGeometry","vertices","velocities","colors","adjustSizes","masses","colorType","singleColor","multipleColor","rgbType","rgbTypeDice","pos","push","size","setAttribute","setUsage","shaderMaterial","uniforms","value","transparent","depthWrite","blending","vertexShader","fragmentShader","getPointMesh","update","gravity","frameRateFactor","position","velocity","color","mass","geometry","attributes","array","v","disposeAll","dispose","material","ParticleSeedMesh","super","shake","dice","_f","ParticleTailMesh","BasicFireWorks","meshGroup","isExplode","petalsNum","life","seed","getSeed","add","flowerSizeRate","mapLinear","vx","vy","vz","pm","set","explode","flower","getFlower","remove","radius","theta","degToRad","phi","sin","cos","vel","multiplyScalar","zStep","trad","xStep","yStep","sphereRate","particleMesh","drawTail","count","isComplete","l","length","flowerPos","offsetPos","highestPos","p","RichFireWorks","tailMeshGroup","tails","getTail","petalColor","j","tail","petalR","petalG","petalB","petalA","k","flowerGeometory","desiredVelocity","tailPos","tailVel","subVectors","steer","sub","normalize","FireworksLayer","options","me","lastTick","performance","now","id","lightColor","fireworksInstances","repeat","tick","requestAnimationFrame","onAdd","map","context","scene","key","Object","keys","instances","exploadedIndexList","instance","forEach","splice","launchFireWorks","lngLat","modelPosition","getModelPosition","modelScale","getModelScale","pow","getZoom","upper","fw","FireworksPlugin","name","en","fr","ja","ko","ne","pt","th","iconStyle","backgroundSize","backgroundImage","viewModes","layer","plans","coord","start","end","daily","addLayer","onRemove","removeLayer","onEnabled","interval","setInterval","clock","getTime","plan","onDisabled","clearInterval","onVisibilityChanged","visible","setLayerVisibility"],"mappings":"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"}